* Review: Graph Problems                                        :BLOG:Review:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type: graph, review
:END:
---------------------------------------------------------------------
Graph related questions mainly focus on depth first search and breath first search.
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/review/review-graph"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML

*Basic Abstractions*
| Name                                           | Summary                                                    |
|------------------------------------------------+------------------------------------------------------------|
| bfs and dfs relationship                       | [[https://code.dennyzhang.com/word-ladder-ii][LeetCode: Word Ladder II]]                                   |
| Common graph representations                   | Adjacent matrix, adjacent list, hashmap of hashmaps        |
| From BFS to Bidirectional BFS                  | Half of the time. [[https://code.dennyzhang.com/word-ladder][LeetCode: Word Ladder]]                    |
| 3 cases: state is invalid/visited/unexamined   | [[https://code.dennyzhang.com/word-ladder][LeetCode: Word Ladder]]                                      |
|------------------------------------------------+------------------------------------------------------------|
| [[https://www.youtube.com/watch?v=8Xv03VytWLM][Bridge in graph]]                                | Bridge is an edge, when removed, will disconnect the graph |
| Duplicate edge                                 |                                                            |
| Cycle in undirected graphs                     |                                                            |
| Cycle in DAG                                   | [[https://code.dennyzhang.com/redundant-connection-ii][LeetCode: Redundant Connection II]]                          |
| For matrix graph problems: rectangle vs square |                                                            |

*Top 10 Graph Algorithm*
| Num | Problem                  | Summary                                                                      |
|-----+--------------------------+------------------------------------------------------------------------------|
|   1 | [[https://en.wikipedia.org/wiki/Dijkstra's_algorithm][Dijkstra's algorithm]]     | Greedy. Shortest path for two nodes in a weighted grap. See [[https://code.dennyzhang.com/followup-dijkstra][#dijkstra]]        |
|   2 | Bellman-Ford algorithm   | Shortest path for two nodes in a weighted graph + negative edges. See [[https://code.dennyzhang.com/followup-floyd][#floyd]] |
|   3 | [[https://en.wikipedia.org/wiki/Floyd-Warshall_algorithm][Floyd-Warshall algorithm]] | Find shortest paths in a weighted graph                                      |
|   4 | [[https://en.wikipedia.org/wiki/Kruskal%27s_algorithm][Kruskal's algorithm]]      | Union find + Greedy. [[https://en.wikipedia.org/wiki/Minimum_spanning_tree][Minimum Spanning Tree(MST)]].                             |
|   5 | Prim's algorithm         | Greedy + Heap. [[https://en.wikipedia.org/wiki/Minimum_spanning_tree][Minimum Spanning Tree(MST)]].                                   |
|   6 | Tarjan's algorithm       | Cut node                                                                     |
|   7 |                          | Cut edge                                                                     |
|   8 | Topological Sort         | Node dependencies                                                            |
|   9 | [[https://code.dennyzhang.com/followup-bipartite][#bipartite]]               | Whether graph is a bipartite graph                                           |
#+TBLFM: $1=@-1$1+1;N

*Top Questions*
| Num | Problem                                                   | Summary                                                        |
|-----+-----------------------------------------------------------+----------------------------------------------------------------|
|   1 | Graph Connectivity: Count islands in a 2D matrix          | [[https://code.dennyzhang.com/number-of-islands][LeetCode: Number of Islands]], [[https://code.dennyzhang.com/island-perimeter][LeetCode: Island Perimeter]]        |
|   2 | Get the size of the largest island                        | [[https://code.dennyzhang.com/max-area-of-island][LeetCode: Max Area of Island]]                                   |
|   3 | Cycle detection in a directed graph                       | [[https://code.dennyzhang.com/redundant-connection-ii][LeetCode: Redundant Connection II]]                              |
|   4 | Detect all cycles in a directed graph                     | [[https://code.dennyzhang.com/find-eventual-safe-states][LeetCode: Find Eventual Safe States]]                            |
|   5 | Whether a graph is a tree                                 | [[https://code.dennyzhang.com/graph-valid-tree][LeetCode: Graph Valid Tree]]                                     |
|-----+-----------------------------------------------------------+----------------------------------------------------------------|
|   6 | Update a specific region                                  | [[https://code.dennyzhang.com/flood-fill][LeetCode: Flood Fill]]                                           |
|   7 | Graph trasversal from boarders                            | [[https://code.dennyzhang.com/surrounded-regions][Leetcode: Surrounded Regions]]                                   |
|   8 | Number of Distinct Islands                                | [[https://code.dennyzhang.com/number-of-distinct-islands][LeetCode: Number of Distinct Islands]]                           |
|   9 | Mark levels                                               | [[https://code.dennyzhang.com/01-matrix][LeetCode: 01 Matrix]]                                            |
|  10 | Diameter of a tree in graph theory                        | [[https://code.dennyzhang.com/tree-diameter][LeetCode: Tree Diameter]]                                        |
|  11 | Duplicate edges                                           | [[https://code.dennyzhang.com/reconstruct-itinerary][LeetCode: Reconstruct Itinerary]]                                |
|  12 | Find a certain node in a graph                            | [[https://code.dennyzhang.com/find-the-celebrity][LeetCode: Find the Celebrity]]                                   |
|  13 | Graph with next steps by a trie                           | [[https://code.dennyzhang.com/word-search-ii][Leetcode: Word Search II]]                                       |
|  14 | Coloring graph                                            | [[https://code.dennyzhang.com/minesweeper][LeetCode: Minesweeper]]                                          |
|  15 | Find a certain path from source to destination in a graph | [[https://code.dennyzhang.com/path-with-maximum-minimum-value][LeetCode: Path With Maximum Minimum Value]]                      |
|  16 | Find the shortest distance from point1 to point2          | [[https://code.dennyzhang.com/word-ladder][LeetCode: Word Ladder]], [[https://code.dennyzhang.com/sliding-puzzle][LeetCode: Sliding Puzzle]]                |
|  17 | Find shortest distance in a weighted graph                | [[https://code.dennyzhang.com/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance][LeetCode: Find the City With the Smallest Number of Neighbors]]  |
|  18 | Find all minimum paths from point1 to point2              | [[https://code.dennyzhang.com/word-ladder-ii][LeetCode: Word Ladder II]]                                       |
|  19 | All Paths from Source Lead to Destination                 | [[https://code.dennyzhang.com/all-paths-from-source-lead-to-destination][LeetCode: All Paths from Source Lead to Destination]]            |
|  20 | Node connectivity problem for a sparse 2D matrix          | [[https://code.dennyzhang.com/escape-a-large-maze][LeetCode: Escape a Large Maze]]                                  |
|  21 | Bricks Falling When Hit                                   | [[https://code.dennyzhang.com/bricks-falling-when-hit][LeetCode: Bricks Falling When Hit]]                              |
|  22 | Bridges in a connected graph - [[https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm][Tarjan's algorithm]]         | [[https://code.dennyzhang.com/critical-connections-in-a-network][LeetCode: Critical Connections in a Network]]                    |
|  23 | Valid & Invalid moves                                     | [[https://code.dennyzhang.com/alphabet-board-path][LeetCode: Alphabet Board Path]]                                  |
|  24 | Move in different directions: 4 directions, 8 directions  | [[https://code.dennyzhang.com/queens-that-can-attack-the-king][LeetCode: Queens That Can Attack the King]]                      |
|  25 | String Transforms Into Another String                     | [[https://code.dennyzhang.com/string-transforms-into-another-string][LeetCode: String Transforms Into Another String]]                |
|  26 | Candidates are (i, j, r), instead of (i, j)               | [[https://code.dennyzhang.com/shortest-path-in-a-grid-with-obstacles-elimination][LeetCode: Shortest Path in a Grid with Obstacles Elimination]]   |
|  27 | Clone Graph                                               | [[https://code.dennyzhang.com/clone-graph][Leetcode: Clone Graph]]                                          |
|  28 | Array problem with hidden graph                           | [[https://code.dennyzhang.com/number-of-squareful-arrays][LeetCode: Number of Squareful Arrays]]                           |
|  29 | Is Graph Bipartite                                        | [[https://code.dennyzhang.com/is-graph-bipartite][LeetCode: Is Graph Bipartite]]                                   |
|  30 | Search an infinite graph                                  | [[https://code.dennyzhang.com/escape-a-large-maze][LeetCode: Escape a Large Maze]]                                  |
|  31 | BFS with BFS                                              | [[https://code.dennyzhang.com/minimum-moves-to-move-a-box-to-their-target-location][LeetCode: Minimum Moves to Move a Box to Their Target Location]] |
#+TBLFM: $1=@-1$1+1;N

* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-leetcode-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:

