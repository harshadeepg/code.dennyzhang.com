* Leetcode: Bulb Switcher II                                              :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     math, array, inspiring
:END:
---------------------------------------------------------------------
Bulb Switcher II
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/bulb-switcher-ii"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/review-math][math]], [[https://code.dennyzhang.com/review-array][array]]
---------------------------------------------------------------------
There is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations towards buttons, you need to return how many different kinds of status of the n lights could be.

Suppose n lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:

Flip all the lights.
Flip lights with even numbers.
Flip lights with odd numbers.
Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...
Example 1:
#+BEGIN_EXAMPLE
Input: n = 1, m = 1.
Output: 2
Explanation: Status can be: [on], [off]
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: n = 2, m = 1.
Output: 3
Explanation: Status can be: [on, off], [off, on], [off, off]
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: n = 3, m = 1.
Output: 4
Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].
#+END_EXAMPLE

Note: n and m both fit in range [0, 1000].

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/bulb-switcher-ii][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/bulb-switcher-ii/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: reduce search space: minimize the operations, and the first 3 lights uniquely determine the state
#+BEGIN_SRC python
## https://code.dennyzhang.com/bulb-switcher-ii
## Basic Ideas: array
##
##   If do the same operation twice, no changes will be made.
##   1 op2 1 op3 == 1 op1
##
##   The maximum state is 16 (2^4)
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def flipLights(self, n: int, m: int) -> int:
        res = 0
        states = set()
        for (a, b, c) in [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),
                          (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]:
            if a+b+c>m: continue
            d = (m-(a+b+c))%2
            # caculate the state: a, b, c, d
            n = min(n, 3)
            nums = [1]*n
            for i in range(n): 
                if a == 1: nums[i] = 1-nums[i]
                if b == 1 and i%2 ==1:
                    nums[i] = 1-nums[i]
                if c == 1 and i%2 == 0:
                    nums[i] = 1-nums[i]
                if d == 1 and i%3 == 0:
                    nums[i] = 1-nums[i]
            states.add(tuple(nums))
        return len(states)
#+END_SRC

- Solution: reduce search space for minimize the operations
#+BEGIN_SRC python
## https://code.dennyzhang.com/bulb-switcher-ii
## Basic Ideas: array
##
##   If do the same operation twice, no changes will be made.
##   1 op2 1 op3 == 1 op1
##
##   The maximum state is 16 (2^4)
##
## Complexity: Time O(n), Space O(n)
class Solution:
    def flipLights(self, n: int, m: int) -> int:
        res = 0
        states = set()
        for (a, b, c) in [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),
                          (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]:
            if a+b+c>m: continue
            d = (m-(a+b+c))%2
            # caculate the state: a, b, c, d
            nums = [1]*n
            if a == 1:
                for i in range(n): nums[i] = 1-nums[i]
            if b == 1:
                for i in range(n):
                    if i%2 == 1: nums[i] = 1-nums[i]
            if c == 1:
                for i in range(n):
                    if i%2 == 0: nums[i] = 1-nums[i]
            if d == 1:
                for i in range(n):
                    if i%3 == 0: nums[i] = 1-nums[i]
            s = "".join([str(v) for v in nums])
            states.add(s)
        return len(states)
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
