* LeetCode: Maximum Points You Can Obtain from Cards            :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     presum, array
:END:
---------------------------------------------------------------------
Maximum Points You Can Obtain from Cards
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-points-you-can-obtain-from-cards"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: LeetCode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/followup-presum][#presum]], [[https://code.dennyzhang.com/review-array][#array]]
---------------------------------------------------------------------
There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.
 
Example 1:
#+BEGIN_EXAMPLE
Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.
#+END_EXAMPLE

Example 2:
#+BEGIN_EXAMPLE
Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.
#+END_EXAMPLE

Example 3:
#+BEGIN_EXAMPLE
Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.
#+END_EXAMPLE

Example 4:
#+BEGIN_EXAMPLE
Input: cardPoints = [1,1000,1], k = 1
Output: 1
Explanation: You cannot take the card in the middle. Your best score is 1. 
#+END_EXAMPLE

Example 5:
#+BEGIN_EXAMPLE
Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
Output: 202
#+END_EXAMPLE
 
Constraints:

- 1 <= cardPoints.length <= 10^5
- 1 <= cardPoints[i] <= 10^4
- 1 <= k <= cardPoints.length

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/maximum-points-you-can-obtain-from-cards][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution: Presum Time O(n) Space O(1)

#+BEGIN_SRC python
## https://code.dennyzhang.com/maximum-points-you-can-obtain-from-cards
## Basic Ideas: array
##
##   Loop all possible candidates
##
## Complexity: Time O(n), Space O(1)
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        n = len(cardPoints)
        # cardPoints[n-k:n]
        rightSum = sum(cardPoints[-k:])
        leftSum = 0
        res = leftSum+rightSum
        for i in range(k):
            leftSum += cardPoints[i]
            rightSum -= cardPoints[i-k]
            res = max(res, leftSum+rightSum)
        return res
#+END_SRC

- Solution: Presum Time O(n) Space O(n)

#+BEGIN_SRC python
## https://code.dennyzhang.com/maximum-points-you-can-obtain-from-cards
## Basic Ideas: presum
## Complexity: Time O(n), Space O(n)
class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        n = len(cardPoints)
        presums = [0]*(n+1)
        for i in range(n):
            presums[i+1] = presums[i] + cardPoints[i]
        
        # take i from right
        rightSum = 0
        res = rightSum+presums[k]
        for i in range(k):
            rightSum += cardPoints[n-1-i]
            # left take lements: k-i-1
            res = max(res, presums[k-i-1]+rightSum)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
