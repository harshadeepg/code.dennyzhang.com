* Leetcode: Best Meeting Point                                  :BLOG:Medium:
#+STARTUP: showeverything
#+OPTIONS: toc:nil \n:t ^:nil creator:nil d:nil
:PROPERTIES:
:type:     meetingpoint, manhattandis, redo
:END:
---------------------------------------------------------------------
Best Meeting Point
---------------------------------------------------------------------
#+BEGIN_HTML
<a href="https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/best-meeting-point"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
#+END_HTML
Similar Problems:
- [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]
- [[https://cheatsheet.dennyzhang.com/cheatsheet-followup-A4][CheatSheet: Common Code Problems & Follow-ups]]
- Tag: [[https://code.dennyzhang.com/tag/manhattandis][#manhattandis]], [[https://code.dennyzhang.com/followup-meetingpoint][#meetingpoint]]
---------------------------------------------------------------------
A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:
#+BEGIN_EXAMPLE
Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: 
  Given three people living at (0,0), (0,4), and (2,2):
  The point (0,2) is an ideal meeting point, as the total travel distance 
  of 2+2+2=6 is minimal. So return 6.
#+END_EXAMPLE

Github: [[https://github.com/dennyzhang/code.dennyzhang.com/tree/master/problems/best-meeting-point][code.dennyzhang.com]]

Credits To: [[https://leetcode.com/problems/best-meeting-point/description/][leetcode.com]]

Leave me comments, if you have better ways to solve.
---------------------------------------------------------------------
- Solution:

#+BEGIN_SRC python
## https://code.dennyzhang.com/best-meeting-point
## Basic Ideas: getmedian
##
##  Manhattan distance = x distance + y distance
##  Decrease one 2D problem into two 1D problems
##
## Complexity: Time O(n*m*log(n*m)), Space O(n*m)
class Solution:
    def minTotalDistance(self, grid: List[List[int]]) -> int:
        rows, cols = [], []
        n, m = len(grid), len(grid[0])
        points = []
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    rows.append(i)
                    cols.append(j)
                    points.append((i, j))
        rowMedian = rows[int(len(rows)/2)]
        cols.sort()
        colMedian = cols[int(len(cols)/2)]

        res = 0
        for (i, j) in points:
            res += abs(rowMedian-i) + abs(colMedian-j)
        return res
#+END_SRC

#+BEGIN_HTML
<div style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>
#+END_HTML
